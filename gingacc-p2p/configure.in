AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gingacc-p2p, 0.11.2)

AC_LANG_CPLUSPLUS
AC_PROG_CXX([g++])
AM_PROG_LIBTOOL

CXXFLAGS="-fPIC $CXXFLAGS"
CFLAGS="-fPIC $CFLAGS"

# Bring additional directories where things might be found into our
# search path. I don't know why autoconf doesn't do this by default
for spfx in /usr/local/lib/libjingle /usr/local/lib/ginga/; do
if test -d ${spfx}; then
LDFLAGS="-L${spfx} $LDFLAGS"
fi
done

for spfx in /usr/local/include/libjingle /usr/local/include/ginga/; do
if test -d ${spfx}; then
CPPFLAGS="-I${spfx} $CPPFLAGS"
fi
done


# Não estamos conseguindo fazer com que todas as checagem abaixo funcionem.
# Mesmo sabendo que os headers estão onde deveriam, a checagem diz que não achou.
# Se não me engano, tivemos o mesmo problema com o componente de interação
# multimodal, e acho que simplesmente tiramos a checagem como fizemos aqui.
# Descobrimos que a quantidade de diretórios acrescentados acima influencia.

##############################
# Checks for header files.   #
##############################

##############
# Lince Util #
##############
AC_CHECK_HEADER([linceutil/LoggerUtil.h], [], AC_MSG_ERROR([

Couldn't find Lince Util headers.
Please install Lince Util.

]))

#############
# libJingle #
#############
#AC_CHECK_HEADER([talk/base/cryptstring.h], [], AC_MSG_ERROR([

#Couldn't find libJingle headers.
#Please install libJingle project.

#]))


########################
# Checks for libraries #
########################

##############
# Lince Util #
##############
AC_HAVE_LIBRARY(linceutil, , AC_ERROR([

Couldn't find Lince Util library.
Please install Lince Util.

]))

#############
# libJingle #
#############

#AC_HAVE_LIBRARY(cricketbase, , AC_ERROR([

#Couldn't find libJingle library.
#Please install libJingle Library.

#]))


############################################
# Offering a non-componentized alternative #
############################################
components=yes
AC_ARG_ENABLE(components,
  [  --enable-components build project using components [[default=yes]]],
  enable_components="$enableval", enable_components=yes)

if test x$enable_components = xno; then
   COMPONENTS_LIBS='-L/usr/local/lib/ -L/usr/local/lib/ginga/ \
       -L/usr/local/lib/libjingle'
   TEST_COMPONENTS_LIBS='-lgingaccp2p \
       -L/usr/local/lib/ -L/usr/local/lib/ginga/ \
       -L/usr/local/lib/libjingle'
   AC_DEFINE(HAVE_COMPSUPPORT, 0, [Def to 0 if you don't have Component support.])
   AC_MSG_WARN([*** Component support will not be built.])

else
   COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/ \
       -L/usr/local/lib/libjingle/'
   TEST_COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/ \
       -L/usr/local/lib/libjingle'
   AC_DEFINE(HAVE_COMPSUPPORT, 1, [Def to 1 if you have Component support.])
   AC_MSG_RESULT([*** Component support will be built.])
fi

AM_CONDITIONAL(COMPONENTS, test "$enable_components" = "no")
AC_SUBST(COMPONENTS_LIBS)
AC_SUBST(TEST_COMPONENTS_LIBS)


AC_OUTPUT(Makefile include/Makefile src/Makefile)
